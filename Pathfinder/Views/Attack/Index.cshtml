@model Pathfinder.ViewModels.PlayerCharacter

@{
    ViewBag.Title = "Attacks";
}

<script type="text/javascript">
    window.onload = function () {
        (function (factory) {
            if (typeof define === 'function' && define.amd) {
                define(['jquery', 'hammerjs'], factory);
            } else if (typeof exports === 'object') {
                factory(require('jquery'), require('hammerjs'));
            } else {
                factory(jQuery, Hammer);
            }
        }(function ($, Hammer) {
            function hammerify(el, options) {
                var $el = $(el);
                if (!$el.data("hammer")) {
                    $el.data("hammer", new Hammer($el[0], options));
                }
            }

            $.fn.hammer = function (options) {
                return this.each(function () {
                    hammerify(this, options);
                });
            };

            // extend the emit method to also trigger jQuery events
            Hammer.Manager.prototype.emit = (function (originalEmit) {
                return function (type, data) {
                    originalEmit.call(this, type, data);
                    $(this.element).trigger({
                        type: type,
                        gesture: data
                    });
                };
            })(Hammer.Manager.prototype.emit);
        }));

        $('.single_roll').hammer().on('press', function (e) {
            AttackRoller('Roll Attacks', $(this).data('weapon'), $(this).data('bonuses'), $(this).data('damage'), $(this).data('critical'));
        });

        $('.single_roll').hammer().on('doubletap', function (e) {
            AttackRoller('Roll Attacks', $(this).data('weapon'), $(this).data('bonuses'), $(this).data('damage'), $(this).data('critical'));
        });

        $('#tblAttacks').on('click', 'button', function () {
            if ($('#txtAttackBonus').val() != '') { var attackBonus = $('#txtAttackBonus').val(); } else { attackBonus = 0; }
            if ($('#txtDamageBonus').val() != '') { var damageBonus = $('#txtDamageBonus').val(); } else { damageBonus = 0; }
            if ($('#txtCriticalMultiplier').val() != '') { var criticalMultiplier = $('#txtCriticalMultiplier').val(); } else { criticalMultiplier = 1; }

            var equation = $(this).data('equation');
            var rollString = '';
            var splitEquation = equation.split(' ');
            var isCritical = false;
            var isCriticalFailure = false;
            var criticalMin = $(this).data('critical');
            
            for (i = 0; i < splitEquation.length; i++) {
                if (rollString != '') { rollString += ' '; }
                if (splitEquation[i].indexOf('d') > -1) {
                    var roll = Roll(splitEquation[i]);
                    if (splitEquation[i] == "1d20" && roll >= criticalMin) { isCritical = true; }
                    if (splitEquation[i] == "1d20" && roll == 1) { isCriticalFailure = true; }
                    rollString += '(' + roll + ')';
                } else {
                    rollString += splitEquation[i];
                }
            }

            if ($(this).data('type') == 'attack' && attackBonus != 0) {
                equation += ' + ' + attackBonus;
                rollString += ' + ' + attackBonus;
            } else if ($(this).data('type') == 'damage') {
                if (damageBonus != 0) {
                    equation += ' + ' + damageBonus;
                    rollString += ' + ' + damageBonus;
                }
                if (criticalMultiplier != 1) {
                    equation = criticalMultiplier + ' * (' + equation + ')';
                    rollString = criticalMultiplier + ' * (' + rollString + ')';
                }
            }

            var result = eval(rollString);
            $(this).fadeOut(200, function () {
                if (isCritical) {
                    $(this).addClass("btn-success");
                } else if (isCriticalFailure) {
                    $(this).addClass("btn-danger");
                } else {
                    $(this).removeClass("btn-success");
                    $(this).removeClass("btn-danger");
                }

                $('#attackRollString').text(equation + ' = ' + rollString + ' = ' + result);
                $(this).text(result);
            });
            $(this).fadeIn(200);
        });
    }
</script>

<h2>Attacks</h2>

<table class="section noclick full">
    <thead onclick="ToggleRowsVisible('tblAttacks')">
        <tr>
            <td>Weapon</td>
            <td>Attacks</td>
            <td>Damage</td>
            <td>Critical</td>
            <td class="hidden-xs">Range</td>
            <td class="hidden-xs">Type</td>
        </tr>
    </thead>
    @foreach (var item in Model.Attacks)
    {
        <tr class="single_roll" data-weapon="@item.WeaponName" data-bonuses="@item.AttackBonuses" data-damage="@item.Damage" data-critical="@item.Weapon.CriticalMinimum">
            <td>@item.WeaponName</td>
            <td>@item.AttackBonuses</td>
            <td>@item.Damage</td>
            <td>@item.Critical</td>
            <td class="hidden-xs">@item.Range</td>
            <td class="hidden-xs">@item.Type</td>
        </tr>
    }
</table>
@Html.ActionLink("+ [New Attack]", "Create", new { Id = Model.MyCharacter.CharacterId })

<!-- Attack Roller -->
<div class="modal fade" id="attackRoller" tabindex="-1" role="dialog" aria-labelledby="attackerTitle" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h3 class="modal-title" id="attackerTitle"></h3>
            </div>
            <div class="modal-body">
                <table id="tblAttacks" class="attack-roller section"></table><br />
                <span id="attackRollString" style="padding-left: 10px; font-size: medium; color: darkgray; text-align: left;"></span>
            </div>
            <div class="modal-body">
                <table class="full">
                    <tr>
                        <td><input id="txtAttackBonus" type="tel" class="form-control" placeholder="Attack"></td>
                        <td><input id="txtDamageBonus" type="tel" class="form-control" placeholder="Damage"></td>
                        <td><input id="txtCriticalMultiplier" type="tel" class="form-control" placeholder="Critical"></td>
                    </tr>
                </table>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

